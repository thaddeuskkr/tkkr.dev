---
import { Image } from "astro:assets";
import Navigation from "../components/Navigation.astro";
import Layout from "../layouts/BaseLayout.astro";
import "../styles/global.css";
const projectImages = import.meta.glob("../assets/projects/*.{png,jpg,jpeg,webp,gif}", { eager: true }) as Record<
    string,
    { default: ImageMetadata }
>;
const projects = Object.values(import.meta.glob("../projects/*.md", { eager: true })) as {
    frontmatter: Record<string, any>;
    compiledContent: () => string;
}[];
const path = Astro.url.pathname.replace(/\//g, "");
---

<Layout title=`thaddeus kuah • ${path}`>
    <Navigation active={path} />
    <div class="mx-auto mb-16 max-w-5xl px-6">
        {
            projects.reverse().map((project) => {
                const { frontmatter } = project;
                return (
                    <div class="mb-4 flex flex-col gap-1">
                        <h1 class="text-lg font-semibold">
                            {frontmatter.url ?
                                <a href={frontmatter.url} class="transition-colors hover:text-zinc-400">
                                    {frontmatter.name}
                                </a>
                            :   frontmatter.name}
                        </h1>
                        <span class="text-zinc-400">
                            {frontmatter.start} - {frontmatter.end}
                            {frontmatter.association ? ` • ${frontmatter.association}` : ""}
                        </span>
                        <div set:html={project.compiledContent()} />
                        <div class="flex flex-wrap gap-2">
                            {frontmatter.skills.map((skill: string) => (
                                <span class="rounded-full bg-zinc-800 px-2 py-1 text-xs font-semibold text-zinc-300">
                                    {skill}
                                </span>
                            ))}
                        </div>
                        {frontmatter.images && frontmatter.images.length > 0 && (
                            <div class="mt-4">
                                <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
                                    {frontmatter.images.map((imageName: string, index: number) => {
                                        const imageKey = `../assets/projects/${imageName}`;
                                        const imageData = projectImages[imageKey]?.default;
                                        if (!imageData) return null;

                                        const getResponsiveClass = (index: number) => {
                                            if (index === 0) return "";
                                            if (index === 1) return "hidden md:block";
                                            if (index === 2) return "hidden lg:block";
                                            return "hidden";
                                        };

                                        return (
                                            <div
                                                class={`group relative cursor-pointer ${getResponsiveClass(index)}`}
                                                data-image-index={index}
                                                data-project-name={frontmatter.name}
                                                data-all-images={JSON.stringify(frontmatter.images)}>
                                                <div class="aspect-video overflow-hidden rounded-lg shadow-lg">
                                                    <Image
                                                        src={imageData}
                                                        alt={`${frontmatter.name} - Image ${index + 1}`}
                                                        class="h-full w-full object-cover transition-transform group-hover:scale-105"
                                                        width={400}
                                                        height={225}
                                                    />
                                                </div>
                                                <div class="absolute inset-0 flex items-center justify-center rounded-lg bg-black/0 transition-opacity group-hover:bg-black/30">
                                                    <svg
                                                        class="h-8 w-8 text-white opacity-0 transition-opacity group-hover:opacity-100"
                                                        fill="none"
                                                        stroke="currentColor"
                                                        viewBox="0 0 24 24">
                                                        <path
                                                            stroke-linecap="round"
                                                            stroke-linejoin="round"
                                                            stroke-width="2"
                                                            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"
                                                        />
                                                    </svg>
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>
                                {frontmatter.images.length > 1 && (
                                    <p class="mt-2 text-sm text-zinc-400">
                                        <span class="md:hidden">+{frontmatter.images.length - 1} more in gallery</span>
                                        <span class="hidden md:block lg:hidden">
                                            {frontmatter.images.length > 2 ?
                                                `+${frontmatter.images.length - 2} more in gallery`
                                            :   "Click to view in gallery"}
                                        </span>
                                        <span class="hidden lg:block">
                                            {frontmatter.images.length > 3 ?
                                                `+${frontmatter.images.length - 3} more in gallery`
                                            :   "Click to view in gallery"}
                                        </span>
                                    </p>
                                )}
                            </div>
                        )}
                    </div>
                );
            })
        }
    </div>

    <div id="imageModal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/75 p-4">
        <button id="closeModal" class="absolute top-4 right-4 z-10 cursor-pointer text-white hover:text-gray-300">
            <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>

        <button
            id="prevImage"
            class="absolute top-1/2 left-4 z-10 hidden -translate-y-1/2 cursor-pointer text-white hover:text-gray-300 md:block">
            <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
        </button>

        <button
            id="nextImage"
            class="absolute top-1/2 right-4 z-10 hidden -translate-y-1/2 cursor-pointer text-white hover:text-gray-300 md:block">
            <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
        </button>

        <div class="flex max-h-full max-w-4xl flex-col items-center">
            <div class="relative flex flex-1 items-center justify-center">
                <img id="modalImage" src="" alt="" class="max-h-full max-w-full rounded-lg" />
            </div>

            <div class="mt-4 text-center text-white">
                <p id="modalCaption" class="text-lg font-semibold"></p>
                <p id="modalCounter" class="text-sm text-gray-300"></p>

                <div class="mt-4 flex justify-center gap-6 md:hidden">
                    <button
                        id="prevImageMobile"
                        class="flex cursor-pointer items-center justify-center rounded-full bg-white/10 p-3 text-white transition-colors hover:bg-white/20">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"
                            ></path>
                        </svg>
                    </button>
                    <button
                        id="nextImageMobile"
                        class="flex cursor-pointer items-center justify-center rounded-full bg-white/10 p-3 text-white transition-colors hover:bg-white/20">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"
                            ></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script is:inline define:vars={{ projectImages }}>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("imageModal");
            const modalImage = document.getElementById("modalImage");
            const modalCaption = document.getElementById("modalCaption");
            const modalCounter = document.getElementById("modalCounter");
            const closeButton = document.getElementById("closeModal");
            const prevButton = document.getElementById("prevImage");
            const nextButton = document.getElementById("nextImage");
            const prevButtonMobile = document.getElementById("prevImageMobile");
            const nextButtonMobile = document.getElementById("nextImageMobile");

            if (
                !modal ||
                !modalImage ||
                !modalCaption ||
                !modalCounter ||
                !closeButton ||
                !prevButton ||
                !nextButton ||
                !prevButtonMobile ||
                !nextButtonMobile
            )
                return;

            let currentProjectName = "";
            let currentImageIndex = 0;
            let currentProjectImages = [];
            let currentImageLoad = null;

            const KEYS = {
                ESCAPE: "Escape",
                ARROW_LEFT: "ArrowLeft",
                ARROW_RIGHT: "ArrowRight",
            };

            function updateNavigationButtons() {
                const hasMultipleImages = currentProjectImages.length > 1;

                if (hasMultipleImages) {
                    prevButton.classList.remove("!hidden");
                    nextButton.classList.remove("!hidden");
                } else {
                    prevButton.classList.add("!hidden");
                    nextButton.classList.add("!hidden");
                }

                prevButtonMobile.style.display = hasMultipleImages ? "flex" : "none";
                nextButtonMobile.style.display = hasMultipleImages ? "flex" : "none";
            }

            function loadImage(imageSrc, callback) {
                if (currentImageLoad) {
                    currentImageLoad.onload = null;
                    currentImageLoad.onerror = null;
                }

                currentImageLoad = new Image();
                currentImageLoad.onload = function () {
                    if (this === currentImageLoad) {
                        callback();
                    }
                };
                currentImageLoad.src = imageSrc;
            }

            function updateModalContent() {
                if (currentProjectImages.length === 0) return;
                const currentImage = currentProjectImages[currentImageIndex];
                if (!currentImage) return;

                modalCaption.textContent = currentProjectName;
                modalCounter.textContent = `${currentImageIndex + 1} of ${currentProjectImages.length}`;
                updateNavigationButtons();

                loadImage(currentImage.src, function () {
                    modalImage.src = currentImage.src;
                    modalImage.alt = currentImage.alt;
                    showModal();
                });
            }

            function showCurrentImage() {
                if (currentProjectImages.length === 0) return;
                const currentImage = currentProjectImages[currentImageIndex];
                if (!currentImage) return;

                modalCaption.textContent = currentProjectName;
                modalCounter.textContent = `${currentImageIndex + 1} of ${currentProjectImages.length}`;
                updateNavigationButtons();

                loadImage(currentImage.src, function () {
                    modalImage.src = currentImage.src;
                    modalImage.alt = currentImage.alt;
                });
            }

            document.querySelectorAll("[data-image-index]").forEach(function (imageElement) {
                imageElement.addEventListener("click", function () {
                    const projectName = this.getAttribute("data-project-name") || "";
                    const imageIndex = parseInt(this.getAttribute("data-image-index") || "0");
                    const allImagesData = this.getAttribute("data-all-images");

                    if (!allImagesData) return;

                    let imageNames;
                    try {
                        imageNames = JSON.parse(allImagesData);
                    } catch (error) {
                        console.error("Failed to parse image data:", error);
                        return;
                    }

                    currentProjectImages = imageNames.map(function (imageName, index) {
                        const imageKey = `../assets/projects/${imageName}`;
                        const imageData = projectImages[imageKey];
                        return {
                            src: imageData?.default?.src || "",
                            alt: `${projectName} - Image ${index + 1}`,
                        };
                    });

                    currentProjectName = projectName;
                    currentImageIndex = imageIndex;
                    updateModalContent();
                });
            });

            function showModal() {
                modal.classList.remove("hidden");
                modal.classList.add("flex");
            }

            function hideModal() {
                modal.classList.add("hidden");
                modal.classList.remove("flex");
            }

            function navigateToImage(direction) {
                if (currentProjectImages.length <= 1) return;

                if (direction === "prev") {
                    currentImageIndex =
                        (currentImageIndex - 1 + currentProjectImages.length) % currentProjectImages.length;
                } else if (direction === "next") {
                    currentImageIndex = (currentImageIndex + 1) % currentProjectImages.length;
                }
                showCurrentImage();
            }

            closeButton.addEventListener("click", hideModal);
            modal.addEventListener("click", function (event) {
                if (event.target === modal) hideModal();
            });

            prevButton.addEventListener("click", function () {
                navigateToImage("prev");
            });

            nextButton.addEventListener("click", function () {
                navigateToImage("next");
            });

            prevButtonMobile.addEventListener("click", function () {
                navigateToImage("prev");
            });

            nextButtonMobile.addEventListener("click", function () {
                navigateToImage("next");
            });

            document.addEventListener("keydown", function (event) {
                if (modal.classList.contains("hidden")) return;

                switch (event.key) {
                    case KEYS.ESCAPE:
                        hideModal();
                        break;
                    case KEYS.ARROW_LEFT:
                        navigateToImage("prev");
                        break;
                    case KEYS.ARROW_RIGHT:
                        navigateToImage("next");
                        break;
                }
            });
        });
    </script>
</Layout>
